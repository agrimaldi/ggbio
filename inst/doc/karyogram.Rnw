%\VignetteIndexEntry{Karyogram Overview}
%\VignetteDepends{}
%\VignetteKeywords{visualization utilities}
%\VignettePackage{ggbio}
\documentclass[10pt]{article}

% \usepackage{times}
\usepackage{hyperref}
\usepackage{verbatim}
\usepackage{graphicx}

% \SweaveOpts{width = 2.5, height = 2}


\textwidth=6.5in
\textheight=8.5in
\parskip=.3cm
\parindent = 0cm
\oddsidemargin=-.1in
\evensidemargin=-.1in
\headheight=-.3in



\newcommand{\Rfunction}[1]{{\texttt{#1}}}
\newcommand{\Robject}[1]{{\texttt{#1}}}
\newcommand{\Rpackage}[1]{{\textit{#1}}}
\newcommand{\Rmethod}[1]{{\texttt{#1}}}
\newcommand{\Rfunarg}[1]{{\texttt{#1}}}
\newcommand{\Rclass}[1]{{\textit{#1}}}
\newcommand{\Rcode}[1]{{\texttt{#1}}}

\newcommand{\software}[1]{\textsf{#1}}
\newcommand{\R}{\software{R}}
\newcommand{\Bioc}{\software{Bioconductor}}
\newcommand{\IRanges}{\Rpackage{IRanges}}
\newcommand{\biovizBase}{\Rpackage{biovizBase}}
\newcommand{\ggbio}{\Rpackage{ggbio}}
\newcommand{\visnab}{\Rpackage{visnab}}
\newcommand{\ggplot}{\Rpackage{ggplot2}}
\newcommand{\grid}{\Rpackage{grid}}
\newcommand{\gridExtra}{\Rpackage{gridExtra}}
\newcommand{\qplot}{\Rfunction{qplot}}
\newcommand{\autoplot}{\Rfunction{autoplot}}

\title{Karyogram overview}
\author{Tengfei Yin}
\date{\today}

\setkeys{Gin}{width=0.8\textwidth, height=0.65\textwidth}
\begin{document}
\maketitle
\tableofcontents
\section{Introduction}
A karyotype is the number and appearance of chromosomes in the nucleus of a
eukaryotic cell\footnote{http://en.wikipedia.org/wiki/Karyotype}. It's one
overview option when we want to show distribution of certain events on the
genome, for example, binding sites for one protein. Particular pattern might be
easier to observe from graphics, such as
\begin{itemize}
\item Clusterred events.
\item Large missing chunk of data on particular chromosome.
\end{itemize}

\Robject{GRanges} object is also an ideal container for storing data needed for
karyogram plot. Here is the strategy we used for generating ideogram templates.
\begin{itemize}
\item \Robject{seqlengths} is not required, but highly recommended for plotting
  karyogram. If a \Robject{GRanges} object contains \Robject{seqlengths}, we
  know exactly how long each chromosome is, and will use this information to
  plot genome space, particularly we plot all levels included in it, not just
  DATA space.
\item If a \Robject{GRanges} has no \Robject{seqlengths}, we will issue a
  warning and try to estimate the chromosome lengths from data included. This is
  NOT accurate most time, so please pay attention to what you are going to
  visualize and make sure set \Robject{seqlengths} before hand.
\end{itemize}

\section{Usage}
\subsection{\Rfunction{autoplot}}
Let's first introduce how to use \autoplot{} to generate karyogram graphic. To
understand why we call it kayogram, let's first visualize some cytoband. We use
\Rfunarg{layout} argument to specify this special layout "karyogram". And under
this layout, \Rfunarg{cytoband} argument is acceptable, default is
\Rcode{FALSE}, if set to \Rcode{TRUE}, we assume your have additional
information associated with the data, stored in column \Rcode{gieStain}, it will
try to fill colors based on this variable according to a pre-set staining
colors. You may notice, this data set doesn't contain seqlengths information,
but the data space actually cover the real space, so it's not going to be a
problem. 

@ 
<<loading>>=
library(ggbio)
data(hg19IdeogramCyto, package = "biovizBase")
head(hg19IdeogramCyto)
## default pre-set color stored in 
getOption("biovizBase")$cytobandColor
@ %def 

\begin{figure}[!htpb]
  \centering
@ 
<<default, fig = TRUE>>=
autoplot(hg19IdeogramCyto, layout = "karyogram", cytoband = TRUE) 
@ %def   
  \caption{Cytoband on karyogram layout.}
  \label{fig:cytoband}
\end{figure}
\clearpage 

You may want to change the order of chromosomes, \Rfunction{keepSeqlevels} are
convenient for this purpose, it's defined in package \Rpackage{GenomicRanges}.

\begin{figure}[!htpb]
  \centering
@ 
<<change-order, fig = TRUE>>=
library(GenomicRanges)
hg19 <- keepSeqlevels(hg19IdeogramCyto, paste0("chr", c(1:22, "X", "Y")))
head(hg19)
autoplot(hg19, layout = "karyogram", cytoband = TRUE)
@ %def   
  \caption{Cytoband on karyogram layout after re-ordering the chromosome names.}
  \label{fig:cytoband-reorder}
\end{figure}
\clearpage

This \Robject{GRanges} object is special, it's a 'ideogram' we expected, in this
case, \Rfunarg{cytoband} argument could set to \Rcode{TRUE}, and we draw special
ideogram not just rectangles but show centromere as possible.

If we set it to \Rcode{FALSE}, we treat it as a normal \Robject{GRanges},
nothing special as ideogram. So to show the cytoband, we need to specify which
color column variable to fill as cytoband, function \Rfunction{aes} use an
unevaluated expression like \Rcode{fill = gieStain}, \textit{gieStain} is column
name which store cytoband color, notice that we don't use quotes around it, this
means it's not something defined globally, but some column name defined in the
data. The system will usually automatically assign categorical colors to
represent this variable. But instead, cytoband already have some pre-defined
colors which mimic the color you observed under microscope. Function
\Rfunction{scale\_fill\_giemsa} did this trick to correct the color. If it's
first time you observe usage by \Rcode{+}, it's a very popular API in package
\ggplot{}\footnote{http://had.co.nz/ggplot2/}, which could add graphics layer by
layer or revise a existing graphic.
\begin{figure}[!htpb]
  \centering
@ 
<<cyto-normal, fig = TRUE>>=
library(GenomicRanges)
## it's a 'ideogram'
biovizBase::isIdeogram(hg19)
## set to FALSE
autoplot(hg19, layout = "karyogram", cytoband = FALSE, aes(fill = gieStain)) +
  scale_fill_giemsa()
@ %def   
\caption{Cytoband on karyogram layout. We treat it as normal \Robject{GRanges}
  data set, so we fill with gieStain color, and use
  \Rfunction{scale\_fill\_giemsa} to use customized color. Notice the difference
  if it's not a 'ideogram' object. we don't draw centromere particularly.}
\label{fig:cytoband-custom}
\end{figure}
\clearpage

Let's try a different data set which is not an 'ideogram', but a normal
\Robject{GRanges} object that most people will have, extra data such as
statistical values or categorical levels are stored in element data columns used
for aesthetics mapping.

We use a default data in package \Rpackage{biovizBase}, which is a subset of RNA
editing set in human. The data involved in this \Robject{GRanges} is sparse, so
we cannot simply use it to make karyogram, otherwise, the estimated chromosome
lengths will be very rough and inaccurate. So what we need to do is:
\begin{enumerate}
\item Adding seqlegnths to this \Robject{GRanges} object. If you adding
  seqlengths to object, we have two ways to show chromosome space as karyogram. 
  \\\Rcode{autoplot(object, layout = 'karyogram')} or 
  \\\Rcode{autoplot(seqinfo(object))}.
\item Changing the order of chromosomes.  
\item Visualize it and map variable to different aesthetics.  
\end{enumerate}

\begin{figure}[!htpb]
  \centering
@ 
<<load-RNAediting, fig = TRUE>>=
data(darned_hg19_subset500, package = "biovizBase")
dn <- darned_hg19_subset500
head(dn)
## add seqlengths
## we have seqlegnths information in another data set
data(hg19Ideogram, package = "biovizBase")
seqlengths(dn) <- seqlengths(hg19Ideogram)[names(seqlengths(dn))]
## now we have seqlengths
head(dn)
## then we change order
dn <- keepSeqlevels(dn, paste0("chr", c(1:22, "X")))
autoplot(dn, layout = "karyogram")
## this equivalent to 
## autoplot(seqinfo(dn))
@ %def   
\caption{Default karyogram for non-ideogram \Robject{GRanges} object, in this
  example, it's a subset of human RNA-editing sites, default is to use
  seqlengths information or esitmated seqlengths information to plot a white
  background, then plot actual data(interval or single position) as rectangle or
  segment. Default color is just black. }
  \label{fig:RNA-editing-default}
\end{figure}
\clearpage

Then we take one step further, the power of \ggplot{} or \ggbio{} is the
flexible multivariate data mapping ability in graphics, make data exploration
much more convenient. In the following example, we are trying to map a
categorical variable 'exReg' to color, this variable is included in the data,
and have three levels, '3' indicate 3' utr, '5' means 5' utr and 'C' means
coding region. We have some missing values indicated as \Rcode{NA}, in default,
it's going to be shown in gray color, and keep in mind, since the basic
geom(geometric object) is rectangle, and genome space is very large, so change
both color/fill color of the rectangle to specify both border and filled color
is necessary to get the data shown as different color, otherwise if the region
is too small, border color is going to override the fill color.
\begin{figure}[!htpb]
  \centering
@ 
<<load-RNAediting-color, fig = TRUE>>=
## since default is geom rectangle, even though it's looks like segment
## we still use both fill/color to map colors
autoplot(dn, layout = "karyogram", aes(color = exReg, fill = exReg))
@ %def   
\caption{Karyogram for RNA-editing sites, and map color to exReg column, which
  means exon region. '3' indicate 3' utr, '5' means 5' utr and 'C' means coding
  region, NA indicate missing value(or not in other three levels) shown as gray
  color.}
  \label{fig:exReg}
\end{figure}
\clearpage

Or you can set the missing value to particular color you want.
\begin{figure}[!htpb]
  \centering
@ 
<<load-RNAediting-color-NA, fig = TRUE>>=
## since default is geom rectangle, even though it's looks like segment
## we still use both fill/color to map colors
autoplot(dn, layout = "karyogram", aes(color = exReg, fill = exReg)) +
  scale_color_discrete(na.value = "brown")
@ %def   
\caption{Karyogram for RNA-editing sites, and map color to exReg column, which
  means exon region. '3' indicate 3' utr, '5' means 5' utr and 'C' means coding
  region, we force the missing value(NA) shown as brown color.}
  \label{fig:exReg-NA}
\end{figure}
\clearpage

A test could be performed to demonstrate why 'seqlengths' of object
\Robject{GRanges} is important. Let's assume we set wrong chromosome lengths by
accident, lengths are all equal to chromosome 1. We arbitrarily set it to the
same number so that every chromosome are of equal length. From Figure
\ref{fig:exReg-NA-fake}, it's clear that this will affect what we see. So please
make sure 
\begin{itemize}
\item You get data space cover exactly the same chromosome space for each
  chromosome. or
\item You set the seqlengths to the right number.
\end{itemize}
Otherwise you will see weird pattern from your results, so actually it's a good
way to test your raw data too, if you raw data have something beyond chromosome
space, you need to dig into it to see what happened.


\begin{figure}[!htpb]
  \centering
@ 
<<load-RNAediting-color-fake, fig = TRUE>>=
dn2 <- dn
seqlengths(dn2) <- rep(max(seqlengths(dn2)), length(seqlengths(dn2)) )
autoplot(dn2, layout = "karyogram", aes(color = exReg, fill = exReg)) 
@ %def   
\caption{Karyogram for RNA-editing sites, and map color to exReg column, which
  means exon region. '3' indicate 3' utr, '5' means 5' utr and 'C' means coding
  region, we force the missing value(NA) shown as brown color.}
  \label{fig:exReg-NA-fake}
\end{figure}
\clearpage

\subsection{\Rfunction{plotKaryogram}}
\Rfunction{plotKaryogram} (or \Rfunction{plotStackedOverview}) are specialized
function to draw karyogram graphics. It's actually what function \autoplot{}
calls inside. API is a littler simpler because layout 'karyogram' is default in
these two functions. So equivalent usage is like
@ 
<<plotKaryogram, eval = FALSE>>=
plotKaryogram(dn)
plotKaryogram(dn, aes(color = exReg, fill = exReg))
@ %def 

\subsection{\Rfunction{layout\_karyogram}}
In this section, a lower level function \Rfunction{layout\_karyogram} is going
to be introduced. This is convenient API for constructing karyogram plot and
adding more data layer by layer. Function \Rfunction{ggplot} is just to create
blank object to add layer on.

You need to pay attention to 
\begin{itemize}
\item when you add plots layer by layer, seqnames of different data must be the
  same to make sure the data are mapped to the same chromosome. For example, if
  you name chromosome following schema like \textit{chr1} and use just number
  \textit{1} to name other data, they will be treated as different chromosomes.
\item cannot use the same aesthetics mapping multiple time for different
  data. For example, if you have used aes(color = ), for one data, you cannot
  use aes(color = ) anymore for mapping variables from other add-on data, this
  is currently not allowed in \ggplot{}, even though you expect multiple color
  legend shows up, this is going to confuse people which is which. HOWEVER,
  \Rfunarg{color} or \Rfunarg{fill} without \Rcode{aes()} wrap around, is
  allowed for any track, it's set single arbitrary color. This is shown in
  Figure \ref{fig:low-default-addon}
\item Default rectangle y range is [0, 10], so when you add on more data layer
  by layer on existing graphics, you can use \Rfunarg{ylim} to control how to
  normalize your data and plot it relative to chromosome space. For example,
  with default, chromosome space is plotted between y [0, 10], if you use
  \Rcode{ylim = c(10 , 20)}, you will stack data right above each chromosomes
  and with equal width. For geom like 'point', which you need to specify 'y'
  value in \Rcode{aes()}, we will add 5\% margin on top and at bottom of that
  track.
\end{itemize}

\begin{figure}[!htpb]
  \centering
@ 
<<low-default, fig = TRUE>>=
## plot ideogram
p <- ggplot() + layout_karyogram(hg19, cytoband = TRUE)
p
## eqevelant autoplot(hg19, layout = "karyogram", cytoband = TRUE)
@ %def   
  \caption{Ideogram overview by using the function layout\_karyogram}
  \label{fig:low-default}
\end{figure}
\clearpage

\begin{figure}[!htpb]
  \centering
@ 
<<low-default-addon, fig = TRUE>>=
p <- p + layout_karyogram(dn, geom = "rect", ylim = c(11, 21), color = "red")
## commented line below won't work
## the cytoband fill color has been used already.
## p <- p + layout_karyogram(dn, aes(fill = exReg, color = exReg), geom = "rect")
p
@ %def   
\caption{We layout another track(data) which is RNA-editing sites on top of
  ideogram. Notice since legend fill and color is used, we cannot specify that
  in RNA-editing track, we could only set it to arbitrary color.}
  \label{fig:low-default-addon}
\end{figure}



Then we construct another multiple layer graphics for multiple data using
different geom, suppose we want to show RNA-editing sites on chromosome space as
rectangle(looks like segment in graphic) and stack a line for another track
above. 

\begin{figure}[!htpb]
  \centering
@ 
<<edit-space, fig = TRUE>>=
## plot chromosome space
p <- autoplot(seqinfo(dn))
## make sure you pass rect as geom
## otherwise you just get background
p <- p + layout_karyogram(dn, aes(fill = exReg, color = exReg), geom = "rect")
values(dn)$pvalue <- rnorm(length(dn))
p + layout_karyogram(dn, aes(x = start, y = pvalue), ylim = c(10, 30), geom = "line", color = "red")
p
@ %def 
  \caption{Using Seqinfo to generate a white chromosome space, then adding
    RNA-editing site and then use a fake value to shown as lines.}
  \label{fig:edit-space}
\end{figure}
\clearpage
\section{sessionInfo}
@ 
<<sessionInfo>>=
sessionInfo()
@ %def 

\end{document}
