%\VignetteIndexEntry{Get and plot ideogram}
%\VignetteDepends{}
%\VignetteKeywords{visualization utilities}
%\VignettePackage{ggbio}
\documentclass[10pt]{article}

% \usepackage{times}
\usepackage{hyperref}
\usepackage{verbatim}
\usepackage{graphicx}

% \SweaveOpts{width = 2.5, height = 2}


\textwidth=6.5in
\textheight=8.5in
\parskip=.3cm
\parindent = 0cm
\oddsidemargin=-.1in
\evensidemargin=-.1in
\headheight=-.3in

\setkeys{Gin}{width=0.95\textwidth}
\newcommand{\Rfunction}[1]{{\texttt{#1}}}
\newcommand{\Robject}[1]{{\texttt{#1}}}
\newcommand{\Rpackage}[1]{{\textit{#1}}}
\newcommand{\Rmethod}[1]{{\texttt{#1}}}
\newcommand{\Rfunarg}[1]{{\texttt{#1}}}
\newcommand{\Rclass}[1]{{\textit{#1}}}
\newcommand{\Rcode}[1]{{\texttt{#1}}}

\newcommand{\software}[1]{\textsf{#1}}
\newcommand{\R}{\software{R}}
\newcommand{\Bioc}{\software{Bioconductor}}
\newcommand{\IRanges}{\Rpackage{IRanges}}
\newcommand{\biovizBase}{\Rpackage{biovizBase}}
\newcommand{\ggbio}{\Rpackage{ggbio}}
\newcommand{\visnab}{\Rpackage{visnab}}
\newcommand{\ggplot}{\Rpackage{ggplot2}}
\newcommand{\grid}{\Rpackage{grid}}
\newcommand{\gridExtra}{\Rpackage{gridExtra}}
\newcommand{\qplot}{\Rfunction{qplot}}
\newcommand{\autoplot}{\Rfunction{autoplot}}

\title{Get and plot single chromosome ideogram}
\author{Tengfei Yin}
\date{\today}


\begin{document}
\setkeys{Gin}{width=0.6\textwidth}
\maketitle
\tableofcontents
\section{Introduction}
Ideograms are a schematic representation of chromosomes showing the relative
size and banding patterns of the chromosomes.  Single chromosome ideogram
overview is widely used in most track-based genome browsers, usually on top of
all tracks, and use a indicator such as a highlighted winbdow to indicate
current region being viewed for tracks below, in this case, users won't lose too
much context when zoomed into certain region.

\section{Usage}
\subsection{Visualization of ideogram for single chromosome}
For single chromosome ideogram, we require they have been arranged into a
\Robject{GRanges} object in order to be visualized in \ggbio{}. We will
introduce how to get those ideogram on-line and manually later. Let's first take
a look at what the data looks like. 

We have two types of ideogram, which have different requirements for data, let's
first introduce the most commonly used one: \textit{Ideogram with cytoband}. It
could be visualized with banding information, and require extra columns such as
\begin{itemize}
\item name: start with p or q. to tell the different arms of chromosomes. such
  as \textbf{p36.22} and \textbf{q12}.
\item gieStain: dye color of cytoband. such as \textbf{gneg}.
\end{itemize}
Keep in mind, now, the data need to be transformed into a \Robject{GRanges}
object. In the following example, we use a default data set in \ggbio{} called
\textit{hg19IdeogramCyto} to show human ideogram. And a function called
\Rfunction{isIdeogram} in package \Rpackage{biovizBase} could be used to check
on your data, to see if it contain sufficient information about cytoband and
arms or not.

@ 
<<load>>=
library(biovizBase)
data(hg19IdeogramCyto)
## data structure
hg19IdeogramCyto
## return TRUE, if the object could be visualized by ggbio
biovizBase::isIdeogram(hg19IdeogramCyto) 
@ %def 

When the data is ready to be plotted, as you can tell, most time you only want
to visualize a single chromosome, so you need to specify it. To visualize it, in
\ggbio{}, there two functions to do it, \Rfunction{plotIdeogram},
\Rfunction{plotSingleChrom}, they are just synonyms. If the graphic device is
big, resize it to proper size or bind it in tracks use specified height. The
plot is shown in Figure \ref{fig:ideo-ori}

\begin{figure}[!htpb]
  \centering
@ 
<<ideo-ori, fig = TRUE, height = 1.2>>=
library(ggbio)
p <- plotIdeogram(hg19IdeogramCyto, "chr1")
print(p)
## big, need to be resized.
@ %def   
  \caption{Chromosome1 ideogram for human. Cytoband is colored, and you can tell
  left and right arms of this chromosome.}
  \label{fig:ideo-ori}
\end{figure}


You can also push it to a re-sized viewport you want.

@ 
<<ideo-ori-viewport, fig = FALSE>>=
## to use function viewport, load grid
library(grid)
print(p, vp = viewport(height = 0.15, width = 1))
@ %def 

To add a zoomed highlighted region:

\begin{figure}[!htpb]
  \centering
@ 
<<ideo-ori-zoom, fig = TRUE, height = 1.2>>=
plotIdeogram(hg19IdeogramCyto, "chr1",  zoom.region = c(1e8, 1.5e8))
@ %def   
  \caption{Chromosome1 ideogram for human with zoomed region([1e8, 1.5e8])
    highlighted by a red rectangle.}
\label{fig:ideo-ori-zoom}
\end{figure}

Default ideogram has no X-scale label, to add one, you have to specify argument
\Rfunarg{xlabel} to \Rcode{TRUE}.

\begin{figure}[!htpb]
  \centering
@ 
<<ideo-ori-xlabel, fig = TRUE, height = 1.2>>=
plotIdeogram(hg19IdeogramCyto, "chr1", xlabel = TRUE)
@ %def  
  \caption{Idoegram for human chromosome 1 with x scale labeled.}
  \label{fig:idoe-ori-xlabel}
\end{figure}

Some time, you don't want to visualize a chromosome with cytobands, or you
cannot find any information about cytobands, in this case, you can simply
visualize a blank chromosome just to indicate the position. \ggbio{} has several
ways to do it.

\begin{itemize}
\item Use argument \Rfunarg{cytoband}. Set it to \Rcode{FALSE}.
\item Pass a GRanges with no extra column such as \textbf{name, gieStain}. it
  will automatically parse and estimate the chromosome lengths. It is
  \textbf{IMPORTANT} that to create an accurate lengths for chromosomes, you
  need to either make sure the ranges you passed covers all chromosomes or you
  need to specify the \Rcode{seqlengths} for our \Robject{GRanges} object.
\end{itemize}

So please make sure the \Robject{GRanges} object you passed has an accurate
seglengths information, or you are confident the ranges(for example, cytoband)
will cover all the chromosome space, otherwise, you will end up with some very
inaccurate chromosome lengths and you may NEVER notice from the plot. A example
of this is shown in Figure \ref{fig:idoe-ori-nocyto}.

\begin{figure}[!htpb]
  \centering
@ 
<<ideo-ori-nocyto, fig = TRUE, height = 2>>=
library(GenomicRanges)
## there are no seqlengths
seqlengths(hg19IdeogramCyto)
## so directly plot will try to aggregate and estimate lengths of chromosomes, 
## this is not accurate
data(hg19IdeogramCyto)
p1 <- plotIdeogram(hg19IdeogramCyto, "chr1", cytoband = FALSE, xlabel = TRUE)
## let's assign a short length to this object
hg19_fake_chr1 <- hg19IdeogramCyto
seqlengths(hg19_fake_chr1)[1] <- 1e8
## this will use it's "seqlengths" information to visualize the chromosome.
p2 <- plotIdeogram(hg19_fake_chr1, "chr1", cytoband = FALSE, xlabel = TRUE)
## see the difference
tracks(p1, p2)
@ %def  
\caption{Comparison of two idoegram for human chromosome 1. The top ideogram
  with no seqlengths information, we use estimated lengths. The bottom ideogram
  with a fake seqlength 1e8 for ``chr1'', which is way shorter than the
  estimated lengths or real length, you can tell from those two tracks. }
  \label{fig:idoe-ori-nocyto}
\end{figure}

There is another data set called \textbf{hg19Ideogram}, with no cytoband
information, but with accurate seqlegnths information.

@ 
<<hg19-nocyto>>=
data(hg19Ideogram)
head(hg19Ideogram)
@ %def 

\subsection{Get ideogram or customize the colors}
We only provide default cytoband ideogram information for human, but what if you
want to create your ideogram yourself? There is a high possibility that it's
already in UCSC data base, and we can use package \Rpackage{rtracklayer} to
download the data from the server.
\begin{itemize}
\item \Rfunction{ucscGenomes} function in package \Rpackage{rtracklayer} will
  list all available UCSC genomes.
\item You can also use \biovizBase{}'s \Rfunction{getIdeogram} function without
  any arguments, that will give you some items names you can choose from. This
  function is a convenient wrapper over some functionality in
  \Rpackage{rtracklayer}.
\item Keep in mind, not all available genomes have cytoband information and not
  all of them have the same default dye names as humans.
\end{itemize}


Let's first see how to get available genomes in following examples, we need the
\textbf{db} column to use them in function \Rfunction{getIdeogram}.

@ 
<<getIdeogram, eval = FALSE>>=
library(rtracklayer)
## need UCSC connection
head(ucscGenomes())
@ %def 
\begin{verbatim}
> head(ucscGenomes())
       db species      date                               name
1    hg19   Human Feb. 2009 Genome Reference Consortium GRCh37
2    hg18   Human Mar. 2006                    NCBI Build 36.1
3    hg17   Human  May 2004                      NCBI Build 35
4    hg16   Human Jul. 2003                      NCBI Build 34
5 felCat4     Cat Dec. 2008                   NHGRI catChrV17e
6 felCat3     Cat Mar. 2006          Broad Institute Release 3
\end{verbatim}

\Rfunction{getIdeogram} without arguments will give you choice to choose from too.
@ 
<<getideo-no, eval = FALSE>>=
library(biovizBase)
obj <- getIdeogram()
@ %def 

\begin{verbatim}
Please specify genome 

  1: hg19       2: hg18       3: hg17       4: hg16       5: felCat4
  6: felCat3    7: galGal4    8: galGal3    9: galGal2   10: panTro3
 11: panTro2   12: panTro1   13: bosTau7   14: bosTau6   15: bosTau4
 16: bosTau3   17: bosTau2   18: canFam3   19: canFam2   20: canFam1
 21: loxAfr3   22: fr3       23: fr2       24: fr1       25: nomLeu1
 26: gorGor3   27: cavPor3   28: equCab2   29: equCab1   30: petMar1
 31: anoCar2   32: anoCar1   33: calJac3   34: calJac1   35: oryLat2
 36: myoLuc2   37: mm10      38: mm9       39: mm8       40: mm7    
 41: hetGla1   42: monDom5   43: monDom4   44: monDom1   45: ponAbe2
 46: chrPic1   47: ailMel1   48: susScr2   49: ornAna1   50: oryCun2
 51: rn5       52: rn4       53: rn3       54: rheMac2   55: oviAri1
 56: gasAcu1   57: echTel1   58: tetNig2   59: tetNig1   60: melGal1
 61: macEug2   62: xenTro3   63: xenTro2   64: xenTro1   65: taeGut1
 66: danRer7   67: danRer6   68: danRer5   69: danRer4   70: danRer3
 71: ci2       72: ci1       73: braFlo1   74: strPur2   75: strPur1
 76: apiMel2   77: apiMel1   78: anoGam1   79: droAna2   80: droAna1
 81: droEre1   82: droGri1   83: dm3       84: dm2       85: dm1    
 86: droMoj2   87: droMoj1   88: droPer1   89: dp3       90: dp2    
 91: droSec1   92: droSim1   93: droVir2   94: droVir1   95: droYak2
 96: droYak1   97: caePb2    98: caePb1    99: cb3      100: cb1    
101: ce10     102: ce6      103: ce4      104: ce2      105: caeJap1
106: caeRem3  107: caeRem2  108: priPac1  109: aplCal1  110: sacCer3
111: sacCer2  112: sacCer1  

Selection: 
\end{verbatim}
@ 

Function \Rfunction{getIdeogram} have some control over it.
\begin{itemize}
\item \Rfunarg{subchr} argument: to parse a subset of chromosomes information from genome.
\item \Rfunarg{cytoband} argument: default is TRUE, try to parse cytoband
  information, but sometimes you may came across errors when there is no data
  about cytoband available for certain genomes. We need to get that information
  manually somewhere else.
\end{itemize}

Let's try to get a mouse genome from the data base, we know the data base name
is \textbf{mm9} from above listed choices.
@ 
<<mm9>>=
library(biovizBase)
## just need information about chromosome lengths
mm9 <- getIdeogram("mm9", cytoband = FALSE)
## have 
head(mm9)
## need information about cytoband
mm9 <- getIdeogram("mm9")
head(mm9)
## with extra column 'name' and 'gieStain'.
@ %def 

Now we have to explain where define our default cytoband color, it's in an
option list of package \Rpackage{biovizBase}. Later you will notice some of the
staining color for 'mm9' is not defined in our color list.
@ 
<<cytoband>>=
cyto.def <- getOption("biovizBase")$cytobandColor
cyto.def
setdiff(unique(values(mm9)$gieStain), names(cyto.def))
@ %def 

We notice gieStain \textit{gpos33, gpos66} is not defined in default, if we
directly plot them, those region will be blank. Otherwise, we could 
\begin{itemize}
\item either edited the default color option list
\item or use \ggplot{} lower level utilities.
\end{itemize}

In the following code, we compare a incomplete color default with customized
color.

@ 
<<cyto-color, fig = TRUE, height = 2.5>>=
p1 <- plotIdeogram(mm9, "chr1")
cyto.def
cyto.new <- c(cyto.def, c(gpos33 = "grey80", gpos66 = "grey60"))
## method 1:
optlist <- getOption("biovizBase")
optlist$cytobandColor <- cyto.new
options(biovizBase = optlist)
p2 <- plotIdeogram(mm9, "chr1") 
p3 <- plotIdeogram(mm9, "chr1") + scale_fill_manual(values = cyto.new)
tracks(p1, p2, p3)
@ %def 

\subsection{Plot ideogram directly from Seqinfo}
More information could be found in autoplot tutorial.
\begin{figure}[!htpb]
  \centering
@ 
<<seqinfo, fig = TRUE, height = 2.4>>=
data(hg19Ideogram)
seqs <- seqinfo(hg19Ideogram)
class(seqs)
p1 <- autoplot(seqs["chr1"])
p2 <- autoplot(seqs["chr1"], FALSE)
tracks(type1 = p1, type2 = p2)
@ %def 
  \caption{Plot Seqinfo object.}
\end{figure}


\section{Recommended reading}
Other vignettes associated with this package, such as chip-seq data analysis
shows a fairly high level construction of tracks which embed ideogram. 

\section{sessionInfo}
@ 
<<session-info>>=
sessionInfo()
@ %def 


\end{document}
